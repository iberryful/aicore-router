name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64 (static binary with musl)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            binary_name: acr
            archive_name: acr-linux-x86_64.tar.gz

          # Linux ARM64 (static binary with musl)
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            binary_name: acr
            archive_name: acr-linux-aarch64.tar.gz

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: acr
            archive_name: acr-macos-x86_64.tar.gz

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: acr
            archive_name: acr-macos-aarch64.tar.gz

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: acr.exe
            archive_name: acr-windows-x86_64.zip

          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            binary_name: acr.exe
            archive_name: acr-windows-aarch64.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Install musl tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools (Linux ARM64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          sudo ln -sf /usr/bin/aarch64-linux-gnu-gcc /usr/local/bin/aarch64-linux-musl-gcc

      - name: Use Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # Set linker for ARM64 musl builds
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-gcc

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ../../../${{ matrix.archive_name }}

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.archive_name }}
          overwrite: true

  changelog:
    name: Generate Changelog
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Update Release with Changelog
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.git-cliff.outputs.content }}
